<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>进阶</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-19T06:12:08.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>karen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-各种形式的组件</title>
    <link href="http://yoursite.com/2021/02/19/vue-%E5%90%84%E7%A7%8D%E5%BD%A2%E5%BC%8F%E7%9A%84%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2021/02/19/vue-各种形式的组件/</id>
    <published>2021-02-19T06:10:35.000Z</published>
    <updated>2021-02-19T06:12:08.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>全局注册组件</p></blockquote><p>id命名方式: 字符串 驼峰 首字母大写</p><p>全局组件注册到Vue.options -&gt; Vue.options.components -&gt; 扩展到当前组件的vm.$options.components</p><blockquote><p>局部组件</p></blockquote><p>注册到vm.$options.components</p><blockquote><p>异步组件</p></blockquote><p><strong>应用：减少首屏体积，非首屏组件按需加载</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'async-example'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// require 告诉 webpack 自动将编译后的代码分割成不同的块</span></span><br><span class="line">    <span class="comment">// 这些块将通过 Ajax 请求自动下载</span></span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'./my-async-components], resolve)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>除上面提到的注册方式，还有2种创建方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">    <span class="string">'async-webpack-example'</span>,</span><br><span class="line">    () =&gt; <span class="keyword">import</span>(<span class="string">'./my-async-component'</span>) <span class="comment">// 返回一个 Promise 对象</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;全局注册组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;id命名方式: 字符串 驼峰 首字母大写&lt;/p&gt;
&lt;p&gt;全局组件注册到Vue.options -&amp;gt; Vue.options.components -&amp;gt; 扩展到当前组件的vm.$op
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端开发技巧汇总</title>
    <link href="http://yoursite.com/2021/02/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2021/02/01/移动端开发技巧/</id>
    <published>2021-02-01T03:02:15.000Z</published>
    <updated>2021-02-01T05:34:46.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拨打电话 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:10086"</span>&gt;</span>打电话给10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 发送短信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>发短信给10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 发送邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:karen2424@126.com"</span>&gt;</span>发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开微信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"weixin://"</span>&gt;</span>打开微信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开支付宝 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"alipays://"</span>&gt;</span>打开支付宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 选择照片或拍摄照片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选择视频或拍摄视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多选文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 忽略自动识别电话 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 忽略自动识别邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 忽略自动识别电话和邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁止缩放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁止页面缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 强制QQ浏览器竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 强制x5内核浏览器全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 去除300-350ms click延迟 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 纯数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">pattern</span>=<span class="string">"\d*"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 纯数字带#和* --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁止大小写纠正 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打开微信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"weixin://"</span>&gt;</span>打开微信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开支付宝 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"alipays://"</span>&gt;</span>打开支付宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有些元素的:active可能会无效，而元素的:hover在点击后会一直处于点击状态，需点击其他位置才能解除点击状态。给<body>注册一个空的touchstart事件可将两种状态反转。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rem单位布局，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AutoResponse</span>(<span class="params">width = <span class="number">750</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">if</span> (target.clientWidth &gt;= <span class="number">600</span>) &#123;</span><br><span class="line">        target.style.fontSize = <span class="string">"80px"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target.style.fontSize = target.clientWidth / width * <span class="number">100</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AutoResponse();</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, () =&gt; AutoResponse());</span><br></pre></td></tr></table></figure><p><strong>一句话搞定</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> / <span class="number">7.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> / <span class="number">7.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>屏幕旋转样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 横屏 */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation:</span> landscape) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 竖屏 */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation:</span> portrait) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ios滑动流畅 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.elem</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 防止一个区域滚完连带下个滚动 滚动传播 */</span></span><br><span class="line"><span class="selector-class">.elem</span> &#123;</span><br><span class="line">    <span class="attribute">overscroll-behavior</span>: contain;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页面滚动条抖动 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> - <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 禁止长按选择文字 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="comment">/* pointer-events: none; */</span> <span class="comment">/* 微信浏览器还需附加该属性才有效 */</span></span><br><span class="line">    <span class="attribute">user-select</span>: none; <span class="comment">/* 禁止长按选择文字 */</span></span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">user-select</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 字体大小保持不变 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈谈这次领养后的感受</title>
    <link href="http://yoursite.com/2021/01/29/%E8%B0%88%E8%B0%88%E8%BF%99%E6%AC%A1%E9%A2%86%E5%85%BB%E5%90%8E%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://yoursite.com/2021/01/29/谈谈这次领养后的感受/</id>
    <published>2021-01-29T06:59:02.000Z</published>
    <updated>2021-01-29T07:01:54.882Z</updated>
    
    <content type="html"><![CDATA[<p>到底找领养人与领养人之间该怎么划分界限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;到底找领养人与领养人之间该怎么划分界限&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>迟到的vue source code 记录</title>
    <link href="http://yoursite.com/2021/01/21/%E8%BF%9F%E5%88%B0%E7%9A%84vue-source-code-%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2021/01/21/迟到的vue-source-code-记录/</id>
    <published>2021-01-21T08:00:14.000Z</published>
    <updated>2021-02-01T02:12:45.592Z</updated>
    
    <content type="html"><![CDATA[<ul><li>前期准备：需要拉取远程vue代码</li></ul><blockquote><p><strong>package.json</strong></p></blockquote><p>构建后的主文件: dist/vue.runtime.common.js<br>构建入口js: scripts/config.js<br>我们主要看<strong>platform: web</strong> 的目标构建对象 <strong>TARGET: web-full-dev</strong></p><blockquote><p><strong>build.js</strong></p></blockquote><p>过滤构建配置，构建不同用途的vue.js</p><blockquote><p><strong>config.js</strong></p></blockquote><p>找到web-full-dev<br>可得知入口为 web/entry-runtime-with-compiler.js<br>输出文件 dist/vue.js</p><blockquote><p><strong>web/entry-runtime-with-compiler.js</strong></p></blockquote><p>得知Vue 来自 runtime/index =&gt; core/index =&gt; instance/index</p><blockquote><p><strong>core/instance/index.js</strong></p></blockquote><p>一层层剥开后找到的最终奥义，看完有种啊，终于的感觉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    initMixin(Vue)</span><br><span class="line">    stateMixin(Vue)</span><br><span class="line">    eventsMixin(Vue)</span><br><span class="line">    lifecycleMixin(Vue)</span><br><span class="line">    renderMixin(Vue)</span><br></pre></td></tr></table></figure><p>也就是说Vue实际上是一个类，在js中用Function实现，这是为啥需要 new Vue()来初始化了<br>接下来就调用 ①<strong>init</strong>，该方法在initMixin方法中定义</p><blockquote><p><strong>core/instance/init.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// a uid</span></span><br><span class="line">    vm._uid = uid++</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> startTag, endTag</span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      mark(startTag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">    vm._isVue = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// merge options</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">      <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">      <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">      initInternalComponent(vm, options)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      initProxy(vm)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm._renderProxy = vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// expose real self</span></span><br><span class="line">    vm._self = vm</span><br><span class="line">    initLifecycle(vm)</span><br><span class="line">    initEvents(vm)</span><br><span class="line">    initRender(vm)</span><br><span class="line">    callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">    initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">    initState(vm)</span><br><span class="line">    initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">    callHook(vm, <span class="string">'created'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      vm._name = formatComponentName(vm, <span class="literal">false</span>)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>抓几个关键点来看，init方法主要做了<strong>合并配置，初始化生命周期，初始化事件、渲染、data、props、computed、watch</strong>等</p><p><strong>最后，如果检测到有el属性，就调 ②$mount挂载vm</strong></p><p>感觉线索断了？再回到 <strong>entry-runtime-with-compiler</strong>看一眼</p><blockquote><p><strong>web/entry-runtime-with-compiler.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.template</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template)</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !template) &#123;</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</span><br><span class="line">              <span class="keyword">this</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">        outputSourceRange: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>)</span><br><span class="line">      options.render = render</span><br><span class="line">      options.staticRenderFns = staticRenderFns</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile end'</span>)</span><br><span class="line">        measure(<span class="string">`vue <span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> compile`</span>, <span class="string">'compile'</span>, <span class="string">'compile end'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来$mount在这里定义<br>先缓存了vue原型上的$mount，再重新定义该方法，传入两个可选参数：el（挂载元素 string | Element） 和 hydrating (ssr时为true)<br>返回类型为Component，调用前面缓存的mount<br><strong>el不可挂载知道html或body元素上</strong></p><p><strong>如果没有render方法，则将template/el转为render function</strong><br>那render方法是怎么来的呢 =&gt;<br><strong>const { render, staticRenderFns } = compileToFunctions()</strong></p><p>compileToFunctions也被赋值给了Vue.compile</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.compile = compileToFunctions</span><br></pre></td></tr></table></figure><p>也就是说，<strong>③ 先编译compile后 才得到 ④render方法</strong></p><p>来看看compileToFunctions，源码弯弯绕绕的，那这里就不贴了<br>源码做的工作就是将template转为字符串返回给render属性</p><p>上面提到先缓存了vue原型上的$mount，那么这个是在哪里定义的呢？</p><blockquote><p><strong>web/runtime/index.js</strong></p></blockquote><p>之所以这么设计完全是为了复用，因为它是可以被<strong>runtime only</strong>版本的Vue直接使用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后实际调用了<strong>mountComponent</strong>，那我们来看一下mountComponent方法</p><blockquote><p><strong>core/instance/lifecycle.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  vm.$el = el</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> ((vm.$options.template &amp;&amp; vm.$options.template.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) ||</span><br><span class="line">        vm.$options.el || el) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You are using the runtime-only build of Vue where the template '</span> +</span><br><span class="line">          <span class="string">'compiler is not available. Either pre-compile the templates into '</span> +</span><br><span class="line">          <span class="string">'render functions, or use the compiler-included build.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Failed to mount component: template or render function not defined.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</span><br><span class="line">  <span class="keyword">let</span> updateComponent</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> name = vm._name</span><br><span class="line">      <span class="keyword">const</span> id = vm._uid</span><br><span class="line">      <span class="keyword">const</span> startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      <span class="keyword">const</span> endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">      mark(startTag)</span><br><span class="line">      <span class="keyword">const</span> vnode = vm._render()</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> render`</span>, startTag, endTag)</span><br><span class="line"></span><br><span class="line">      mark(startTag)</span><br><span class="line">      vm._update(vnode, hydrating)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> patch`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      vm._update(vm._render(), hydrating)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we set this to vm._watcher inside the watcher's constructor</span></span><br><span class="line">  <span class="comment">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class="line">  <span class="comment">// component's mounted hook), which relies on vm._watcher being already defined</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line">  hydrating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// manually mounted instance, call mounted on self</span></span><br><span class="line">  <span class="comment">// mounted is called for render-created child components in its inserted hook</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span></span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 核心逻辑就是 实例化一个watcher，回调updateComponent方法<br>在该方法中调用vm._render()生成并返回VNode，最终调用vm._update更新DOM</p><p>再回到 core/instance/index.js ，看看_render方法</p><blockquote><p><strong>core/instance/render.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">      vm.$scopedSlots = normalizeScopedSlots(</span><br><span class="line">        _parentVnode.data.scopedSlots,</span><br><span class="line">        vm.$slots,</span><br><span class="line">        vm.$scopedSlots</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set parent vnode. this allows render functions to have access</span></span><br><span class="line">    <span class="comment">// to the data on the placeholder node.</span></span><br><span class="line">    vm.$vnode = _parentVnode</span><br><span class="line">    <span class="comment">// render self</span></span><br><span class="line">    <span class="keyword">let</span> vnode</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// There's no need to maintain a stack because all render fns are called</span></span><br><span class="line">      <span class="comment">// separately from one another. Nested component's render fns are called</span></span><br><span class="line">      <span class="comment">// when parent component is patched.</span></span><br><span class="line">      currentRenderingInstance = vm</span><br><span class="line">      vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">      <span class="comment">// return error render result,</span></span><br><span class="line">      <span class="comment">// or previous vnode to prevent render error causing blank component</span></span><br><span class="line">      <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; vm.$options.renderError) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentRenderingInstance = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the returned array contains only a single node, allow it</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode) &amp;&amp; vnode.length === <span class="number">1</span>) &#123;</span><br><span class="line">      vnode = vnode[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return empty vnode in case the render function errored out</span></span><br><span class="line">    <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Multiple root nodes returned from render function. Render function '</span> +</span><br><span class="line">          <span class="string">'should return a single root node.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      vnode = createEmptyVNode()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set parent</span></span><br><span class="line">    vnode.parent = _parentVnode</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看到最后，该方法返回 <strong>⑤VNode</strong><br>来看下VNode，它是对真实DOM的一种抽象描述，用来映射对真实DOM的渲染，并不包含DOM操作，非常地轻量简便</p><blockquote><p><strong>core/vdom/vnode.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">    tag: string | <span class="keyword">void</span>;</span><br><span class="line">    data: VNodeData | <span class="keyword">void</span>;</span><br><span class="line">    children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</span><br><span class="line">    text: string | <span class="keyword">void</span>;</span><br><span class="line">    elm: Node | <span class="keyword">void</span>;</span><br><span class="line">    ns: string | <span class="keyword">void</span>;</span><br><span class="line">    context: Component | <span class="keyword">void</span>;</span><br><span class="line">    parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，<strong>Vue用Vnode类去描述一个Virtual DOM</strong>，包含了tag,data,children等属性<br>Vue.js 中 Virtual DOM是借鉴了开源库snabbdom的实现</p><p>再回到render方法，发现传参中有一个createElement<br>这个是什么呢？来看一下</p><blockquote><p><strong>core/vdom/create-element.js</strong></p></blockquote><p>这里主要看两个方法<br><strong>normalizationType 表示子节点规范的类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class="line">    children = normalizeChildren(children)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class="line">    children = simpleNormalizeChildren(children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>simpleNormalizeChildren<br>理论上编译生成的children都是Vnode<br>当一个函数式组件返回数组而不是根节点时，通过这个方法来扁平化children数组<br>保证只有一层深度<br>因为函数式组件已经规范化他们的子节点了</li><li>这能作为性能优化的一个点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. When the children contains components - because a functional component</span></span><br><span class="line"><span class="comment">// may return an Array instead of a single root. In this case, just a simple</span></span><br><span class="line"><span class="comment">// normalization is needed - if any child is an Array, we flatten the whole</span></span><br><span class="line"><span class="comment">// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep</span></span><br><span class="line"><span class="comment">// because functional components already normalize their own children.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleNormalizeChildren</span> (<span class="params">children: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>normalizeChildren<br>当子节点有嵌套数组时，例如 <strong><template>, <slot>, v-for, 用户手写的render函数</strong>，<br>需要下面这个方法来规范化children</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. When the children contains constructs that always generated nested Arrays,</span></span><br><span class="line"><span class="comment">// e.g. &lt;template&gt;, &lt;slot&gt;, v-for, or when the children is provided by user</span></span><br><span class="line"><span class="comment">// with hand-written render functions / JSX. In such cases a full normalization</span></span><br><span class="line"><span class="comment">// is needed to cater to all possible types of children values.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeChildren</span> (<span class="params">children: any</span>): ?<span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPrimitive(children)</span><br><span class="line">    ? [createTextVNode(children)]</span><br><span class="line">    : <span class="built_in">Array</span>.isArray(children)</span><br><span class="line">      ? normalizeArrayChildren(children)</span><br><span class="line">      : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeArrayChildren</span> (<span class="params">children: any, nestedIndex?: string</span>): <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">let</span> i, c, lastIndex, last</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    c = children[i]</span><br><span class="line">    <span class="keyword">if</span> (isUndef(c) || <span class="keyword">typeof</span> c === <span class="string">'boolean'</span>) <span class="keyword">continue</span></span><br><span class="line">    lastIndex = res.length - <span class="number">1</span></span><br><span class="line">    last = res[lastIndex]</span><br><span class="line">    <span class="comment">//  nested</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(c)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        c = normalizeArrayChildren(c, <span class="string">`<span class="subst">$&#123;nestedIndex || <span class="string">''</span>&#125;</span>_<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// merge adjacent text nodes</span></span><br><span class="line">        <span class="keyword">if</span> (isTextNode(c[<span class="number">0</span>]) &amp;&amp; isTextNode(last)) &#123;</span><br><span class="line">          res[lastIndex] = createTextVNode(last.text + (c[<span class="number">0</span>]: any).text)</span><br><span class="line">          c.shift()</span><br><span class="line">        &#125;</span><br><span class="line">        res.push.apply(res, c)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPrimitive(c)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isTextNode(last)) &#123;</span><br><span class="line">        <span class="comment">// merge adjacent text nodes</span></span><br><span class="line">        <span class="comment">// this is necessary for SSR hydration because text nodes are</span></span><br><span class="line">        <span class="comment">// essentially merged when rendered to HTML strings</span></span><br><span class="line">        res[lastIndex] = createTextVNode(last.text + c)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="comment">// convert primitive to vnode</span></span><br><span class="line">        res.push(createTextVNode(c))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isTextNode(c) &amp;&amp; isTextNode(last)) &#123;</span><br><span class="line">        <span class="comment">// merge adjacent text nodes</span></span><br><span class="line">        res[lastIndex] = createTextVNode(last.text + c.text)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// default key for nested array children (likely generated by v-for)</span></span><br><span class="line">        <span class="keyword">if</span> (isTrue(children._isVList) &amp;&amp;</span><br><span class="line">          isDef(c.tag) &amp;&amp;</span><br><span class="line">          isUndef(c.key) &amp;&amp;</span><br><span class="line">          isDef(nestedIndex)) &#123;</span><br><span class="line">          c.key = <span class="string">`__vlist<span class="subst">$&#123;nestedIndex&#125;</span>_<span class="subst">$&#123;i&#125;</span>__`</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.push(c)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>normalizeArrayChildren主要逻辑就是遍历children，规范化每个节点<br>单个节点的类型如果是数组，递归调用normalizeArrayChildren<br>如果是基础类型，调用createTextVNode转为VNode<br>如果存在两个连续的textNode，则合并这两个节点<br>如果有嵌套数组节点，则用nestedIndex更新节点key<br>最后返回一个类型为VNode的数组</p><p>那么，规范化完children后就去实例化VNode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vnode, ns</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">        <span class="comment">// platform built-in elements</span></span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; isDef(data) &amp;&amp; isDef(data.nativeOn)) &#123;</span><br><span class="line">            warn(</span><br><span class="line">                <span class="string">`The .native modifier for v-on is only valid on components but it was used on &lt;<span class="subst">$&#123;tag&#125;</span>&gt;.`</span>,</span><br><span class="line">                context</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">            config.parsePlatformTagName(tag), data, children,</span><br><span class="line">            <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">        )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">        <span class="comment">// component</span></span><br><span class="line">        vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// unknown or unlisted namespaced elements</span></span><br><span class="line">        <span class="comment">// check at runtime because it may get assigned a namespace when its</span></span><br><span class="line">        <span class="comment">// parent normalizes children</span></span><br><span class="line">        vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">            tag, data, children,</span><br><span class="line">            <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再看看之前提到的vm._update方法</p><blockquote><p><strong>core/instance/lifecycle.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">    <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">    <span class="keyword">const</span> restoreActiveInstance = setActiveInstance(vm)</span><br><span class="line">    vm._vnode = vnode</span><br><span class="line">    <span class="comment">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class="line">    <span class="comment">// based on the rendering backend used.</span></span><br><span class="line">    <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">      <span class="comment">// initial render</span></span><br><span class="line">      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// updates</span></span><br><span class="line">      vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    restoreActiveInstance()</span><br><span class="line">    <span class="comment">// update __vue__ reference</span></span><br><span class="line">    <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">      prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">      vm.$el.__vue__ = vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if parent is an HOC, update its $el as well</span></span><br><span class="line">    <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">      vm.$parent.$el = vm.$el</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class="line">    <span class="comment">// updated in a parent's updated hook.</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到初始化渲染的关键就在patch函数<br>那我们来找下patch的具体实现</p><blockquote><p><strong>platforms/web/runtime/patch.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the directive module should be applied last, after all</span></span><br><span class="line"><span class="comment">// built-in modules have been applied.</span></span><br><span class="line"><span class="keyword">const</span> modules = platformModules.concat(baseModules)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> patch: <span class="built_in">Function</span> = createPatchFunction(&#123; nodeOps, modules &#125;)</span><br></pre></td></tr></table></figure><p>createPatchFunction方法包含<strong>nodeOps</strong>和<strong>modules</strong><br>其中，<strong>nodeOps</strong>封装了一系列<strong>DOM</strong>操作的方法<br><strong>modules</strong>定义了一些模块的<strong>钩子函数</strong>的实现<br>看下<strong>createPatchFunction</strong>的具体实现⬇️</p><blockquote><p><strong>core/vdom/patch.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createPatchFunction</span> (<span class="params">backend</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, j</span><br><span class="line">  <span class="keyword">const</span> cbs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; modules, nodeOps &#125; = backend</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class="line">    cbs[hooks[i]] = []</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(modules[j][hooks[i]])) &#123;</span><br><span class="line">        cbs[hooks[i]].push(modules[j][hooks[i]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ... <span class="comment">//  一些辅助函数定义</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">      <span class="comment">// empty mount (likely as component), create new root element</span></span><br><span class="line">      isInitialPatch = <span class="literal">true</span></span><br><span class="line">      createElm(vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType)</span><br><span class="line">      <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">        <span class="comment">// patch existing root node</span></span><br><span class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">          <span class="comment">// mounting to a real element</span></span><br><span class="line">          <span class="comment">// check if this is server-rendered content and if we can perform</span></span><br><span class="line">          <span class="comment">// a successful hydration.</span></span><br><span class="line">          <span class="keyword">if</span> (oldVnode.nodeType === <span class="number">1</span> &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123;</span><br><span class="line">            oldVnode.removeAttribute(SSR_ATTR)</span><br><span class="line">            hydrating = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isTrue(hydrating)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">              invokeInsertHook(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">              <span class="keyword">return</span> oldVnode</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">              warn(</span><br><span class="line">                <span class="string">'The client-side rendered virtual DOM tree is not matching '</span> +</span><br><span class="line">                <span class="string">'server-rendered content. This is likely caused by incorrect '</span> +</span><br><span class="line">                <span class="string">'HTML markup, for example nesting block-level elements inside '</span> +</span><br><span class="line">                <span class="string">'&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing '</span> +</span><br><span class="line">                <span class="string">'full client-side render.'</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// either not server-rendered, or hydration failed.</span></span><br><span class="line">          <span class="comment">// create an empty node and replace it</span></span><br><span class="line">          oldVnode = emptyNodeAt(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// replacing existing element</span></span><br><span class="line">        <span class="keyword">const</span> oldElm = oldVnode.elm</span><br><span class="line">        <span class="keyword">const</span> parentElm = nodeOps.parentNode(oldElm)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create new node</span></span><br><span class="line">        createElm(</span><br><span class="line">          vnode,</span><br><span class="line">          insertedVnodeQueue,</span><br><span class="line">          <span class="comment">// extremely rare edge case: do not insert if old element is in a</span></span><br><span class="line">          <span class="comment">// leaving transition. Only happens when combining transition +</span></span><br><span class="line">          <span class="comment">// keep-alive + HOCs. (#4590)</span></span><br><span class="line">          oldElm._leaveCb ? <span class="literal">null</span> : parentElm,</span><br><span class="line">          nodeOps.nextSibling(oldElm)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// update parent placeholder node element, recursively</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(vnode.parent)) &#123;</span><br><span class="line">          <span class="keyword">let</span> ancestor = vnode.parent</span><br><span class="line">          <span class="keyword">const</span> patchable = isPatchable(vnode)</span><br><span class="line">          <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">              cbs.destroy[i](ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor.elm = vnode.elm</span><br><span class="line">            <span class="keyword">if</span> (patchable) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">                cbs.create[i](emptyNode, ancestor)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// #6513</span></span><br><span class="line">              <span class="comment">// invoke insert hooks that may have been merged by create hooks.</span></span><br><span class="line">              <span class="comment">// e.g. for directives that uses the "inserted" hook.</span></span><br><span class="line">              <span class="keyword">const</span> insert = ancestor.data.hook.insert</span><br><span class="line">              <span class="keyword">if</span> (insert.merged) &#123;</span><br><span class="line">                <span class="comment">// start at index 1 to avoid re-invoking component mounted hook</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; insert.fns.length; i++) &#123;</span><br><span class="line">                  insert.fns[i]()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              registerRef(ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor = ancestor.parent</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// destroy old node</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(parentElm)) &#123;</span><br><span class="line">          removeVnodes([oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.tag)) &#123;</span><br><span class="line">          invokeDestroyHook(oldVnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">    <span class="keyword">return</span> vnode.elm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数最终返回一个patch 方法，即<strong>vm.<strong>patch</strong></strong>调用的就是该方法<br>看到这里，可以看到patch主要逻辑相同，差异在入参，通过createPatchFunction先传入不同平台的参数，再赋给patch，这样patch对外是无差别的，这种编程技巧非常值得学习</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;前期准备：需要拉取远程vue代码&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建后的主文件: dist/vue.runtime.common.js&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目构建部署二三事</title>
    <link href="http://yoursite.com/2021/01/19/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://yoursite.com/2021/01/19/项目构建部署二三事/</id>
    <published>2021-01-19T11:07:27.000Z</published>
    <updated>2021-02-03T08:13:01.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong>今天的重点：vue-cli 构建部署</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行命令 vue-cli-service build</span><br></pre></td></tr></table></figure><p><strong>–target</strong>  指定不同的构建目标，默认为应用模式</p><blockquote><p>应用模式</p></blockquote><ul><li><strong>index.html</strong> 会带有注入的资源和 resource hint</li><li>第三方库会被分到一个独立包以便更好的缓存</li><li>小于 4kb 的静态资源会被内联在 JavaScript 中</li><li><strong>public</strong> 中的静态资源会被复制到输出目录中，如dist</li></ul><p>打包后的文件结构</p><blockquote><p>库模式 –target lib</p></blockquote><p>打包后如下图<br><img src="/img/lib-structure.png" alt="图1"></p><ul><li>dist/lib.common.js：一个给打包器用的CommonJS包 (不幸的是，webpack目前还并没有支持ES modules输出格式的包)</li><li>dist/lib.umd.js：一个直接给浏览器或AMD loader使用的UMD包</li><li>dist/lib.umd.min.js：压缩后的UMD构建版本</li><li>dist/lib.css：提取出来的CSS文件 (可以通过在 vue.config.js 中设置 css: { extract: false } 强制内联)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">部署， 这里举了几个我当前项目中运用到的情况</span><br></pre></td></tr></table></figure><blockquote><p><strong>本地预览</strong><br>在本地预览生产环境构建最简单的方式就是使用一个Node.js静态文件服务器，例如serve</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line"></span><br><span class="line"># -s 参数的意思是将其架设在SPA模式下</span><br><span class="line">serve -s dist</span><br></pre></td></tr></table></figure><p>使用<strong>mode: history</strong>的router是无法搭配简单的静态文件服务器的，例如/goods/:id这样的路由将会返回404<br>上面提到的-s 模式正是解决了这个问题</p><blockquote><p>deploy.sh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">git_url: xxx</span><br><span class="line">source_dir=dist</span><br><span class="line">dest=".deploy/master"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当发生错误时中止脚本</span></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">if [ ! -d $dest ]; then</span><br><span class="line">    git clone $git_url $dest --depth=1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录现在的目录位置</span></span><br><span class="line">cur=`pwd`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入git目录</span></span><br><span class="line">cd $dest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git checkout .</span></span><br><span class="line">git add .</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> reset为线上最新版本</span></span><br><span class="line">git pull origin master</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再pull一下</span></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到原来的目录</span></span><br><span class="line">echo ---back</span><br><span class="line">cd $cur</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建</span></span><br><span class="line">echo +++run build script</span><br><span class="line">npm run build</span><br><span class="line">echo ---build end</span><br><span class="line"></span><br><span class="line">echo +++cpCode start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制代码 , --exclude排除不需要传输的文件模式</span></span><br><span class="line">rsync -r --delete --exclude='.git' $source_dir/. $dest</span><br><span class="line">echo ---cpCode end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> 到构建输出的目录下</span></span><br><span class="line">cd $dest</span><br><span class="line"></span><br><span class="line">echo +++commit start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署到自定义域名</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m "commit in `date '+%Y-%m-%d %H:%M:%S'`"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署到远程git</span></span><br><span class="line">git push origin master</span><br><span class="line">echo ---commit end</span><br><span class="line"></span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><p>deploy.sh做的事情是构建完自动部署提交到远程git</p><blockquote><p>docker</p></blockquote><blockquote><p>参考文档：<a href="https://cli.vuejs.org/zh/guide/build-targets.html" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/build-targets.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;今天的重点：vue-cli 构建部署&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ready for 2021</title>
    <link href="http://yoursite.com/2021/01/13/ready-for-2021/"/>
    <id>http://yoursite.com/2021/01/13/ready-for-2021/</id>
    <published>2021-01-13T02:49:15.000Z</published>
    <updated>2021-01-13T02:49:15.023Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript中的this作用域</title>
    <link href="http://yoursite.com/2021/01/11/%E7%90%86%E8%A7%A3js%E4%B8%AD%E7%9A%84this/"/>
    <id>http://yoursite.com/2021/01/11/理解js中的this/</id>
    <published>2021-01-11T07:22:30.000Z</published>
    <updated>2021-01-13T12:29:23.409Z</updated>
    
    <content type="html"><![CDATA[<p>对于<strong>this</strong>作用域，是每次面试基本必问的，对其理解模糊的话很容易栽倒在它的陷阱里</p><blockquote><p>首先了解下执行上下文</p></blockquote><p><strong>执行该行代码时的环境（或范围），简单点就是谁调用了函数</strong></p><blockquote><p>大概有一下四种情况<br>全局环境下或普通函数中直接调用</p></blockquote><ul><li><strong>默认情况下，执行上下文指向全局</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span> </span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// a,b,c都能在全局上下文中找到</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>这里可以看成<strong>window.foo()</strong> ，即this === window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'nanjing'</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'da'</span>, <span class="attr">buy</span>: buy&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'baozi'</span>, <span class="attr">buy</span>: buy&#125;</span><br><span class="line"></span><br><span class="line">buy()</span><br><span class="line">obj1.buy()</span><br><span class="line">obj2.buy()</span><br></pre></td></tr></table></figure><p>obj1.buy()从字面上来理解就是obj1调用了函数，即<strong>当前函数中的this指向obj1</strong></p><ul><li><p><strong>严格模式下，this指向undefined</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>显式绑定</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bike</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'nanjing'</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'da'</span>, <span class="attr">bike</span>: bike&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'baozi'</span>, <span class="attr">bike</span>: bike&#125;</span><br><span class="line"></span><br><span class="line">bike() <span class="comment">// nanjing</span></span><br><span class="line">obj1.bike() <span class="comment">// da</span></span><br><span class="line">obj2.bike() <span class="comment">// baozi</span></span><br></pre></td></tr></table></figure><p>bike虽然是个普通函数，单独输出时他的this指向了全局对象，<br>但在obj1，obj2中，他作为属性的值，由于是obj1，obj2去调用了bike方法，this显然就指向了obj1，obj2</p></li></ul><p>如果我们稍作修改，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'来了'</span>, <span class="attr">bike</span>: bike&#125;</span><br><span class="line"><span class="keyword">var</span> obj4 = obj3.bike</span><br><span class="line">obj4() <span class="comment">// nanjing</span></span><br></pre></td></tr></table></figure><p>此时又变成了window去调用了o()，怎么理解呢？<br>当将obj3.bike赋值给obj4时，其实obj4只存储了指向bike函数的指针<br>而bike函数是存储在全局对象中的，this指向全局，因此执行obj4()就等于直接调用bike()</p><ul><li><strong>使用apply、call、bind手动修改指向</strong><br>apply / call / bind这三者的区别<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">'Lydia'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sayHi.call(person, <span class="number">21</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sayHi.bind(person, <span class="number">21</span>));</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bike</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'ninja'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'baozi'</span> &#125;</span><br><span class="line"></span><br><span class="line">bike() <span class="comment">// ninja</span></span><br><span class="line">bike.call(obj) <span class="comment">// baozi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">'dabaozi'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> originalBikeFun = bike</span><br><span class="line">bike = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    originalBikeFun.call(obj1)</span><br><span class="line">&#125;</span><br><span class="line">bike() <span class="comment">// dabaozi</span></span><br></pre></td></tr></table></figure><ul><li><strong>作为构造函数，使用new</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bunny</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'ninja'</span></span><br><span class="line">    <span class="keyword">this</span>.maker = <span class="string">'huasan'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'_'</span> + maker)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'feisi'</span></span><br><span class="line"><span class="keyword">var</span> maker = <span class="string">'tuzi'</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> bunny()</span><br><span class="line"><span class="built_in">console</span>.log(obj.maker, <span class="string">'obj.maker'</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>ES6箭头函数是个特例，他会捕获其所在上下文的this值，白话点说就是他看的是周边的this指向哪里</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于&lt;strong&gt;this&lt;/strong&gt;作用域，是每次面试基本必问的，对其理解模糊的话很容易栽倒在它的陷阱里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先了解下执行上下文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;执行该行代码时的环境（或范围），简单点
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>说说使用v-for时key的作用</title>
    <link href="http://yoursite.com/2021/01/07/%E8%B0%88%E8%B0%88%E5%9C%A8%E4%BD%BF%E7%94%A8v-for%E6%97%B6key%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/07/谈谈在使用v-for时key的作用/</id>
    <published>2021-01-07T06:41:46.000Z</published>
    <updated>2021-01-08T03:16:00.020Z</updated>
    
    <content type="html"><![CDATA[<p>通常我们在用v-for指令渲染列表时，如果没有定义 <strong>v-bind:key</strong>，那么会得到错误提示，<br>可能你会不以为然地加上就万事大吉了<br>但，在某些情况下还是要小心为妙</p><p>先来看一下vue官方文档</p><blockquote><p>当 Vue 正在更新使用 v-for 渲染的元素列表时，它默认使用 <strong>“就地更新”</strong>的策略。<br>如果数据项的顺序被改变，Vue 将<strong>不会移动</strong>DOM元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p></blockquote><p><strong>即当不适用key时，vue更倾向于复用DOM，尝试改变数据层面而不是去操作DOM层面</strong><br>但文档上提出来这个模式的使用范围：</p><blockquote><p>这个默认的模式是高效的，但是只适用于<strong>不依赖子组件状态或临时DOM状态</strong>的列表渲染输出。</p></blockquote><p>我们来看个例子，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-comp</span> <span class="attr">:data</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in itemsArray"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test-comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>unshift first<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件 test-comp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; data.word &#125;&#125; - &#123;&#123; data.id &#125;&#125; - &#123;&#123; data.date &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请填写"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>文档中提到了<strong>临时DOM状态</strong>，这个例子里我们看子组件里的input输入框，该输入框没有绑定Vue实例中的任何数据，也就是说他是独立于当前应用程序的状态<br>如果我们在框中输入内容，那么这个内容将会被暂时存储在临时DOM状态中</p></blockquote><p><img src="/img/vue-for-key.png" alt="图1"></p><blockquote><p>更改itemsArray数组元素顺序</p></blockquote><p>我们随便输入一些到输入框中，我们通过底下的unshift first 按钮去改变顺序，在数据头部增加一组ID为11的数据<br><img src="/img/vue-for-key2.png" alt="图2"><br><strong>可以看到input输入框不会随着数组顺序的改变而变化</strong><br>为何？这就是上面说的就地更新，改变数组元素顺序并没有移动DOM元素，而是数据发生变化。</p><p>于是，我们把key属性加上</p><blockquote><p>使用 key 时，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-comp</span> <span class="attr">:data</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in itemsArray"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test-comp</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但结果并没有变化<br><strong>由于这里的key值只是采用了当前项的索引，当数组数据改变时，index并没有变化，只是传入的item发生了改变，所以输入框的内容还是不会改变</strong></p><p>我们改用数据项的id作为key值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-comp</span> <span class="attr">:data</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in itemsArray"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test-comp</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/vue-for-key3.png" alt="图3"><br><strong>id是每项数据的唯一标识，能够确保每项的key是独特唯一的，vue能正确跟踪key变化而重新排列元素顺序</strong></p><p>也就是说，我们应该尽可能地使用节点数据的<strong>唯一ID</strong><br>这样做Vue可以更准确地跟踪每个节点的身份并更新组件状态，并且能够重用和重新排列现有元素</p><blockquote><p><strong>注意</strong>: 不要使用<strong>对象</strong>或<strong>数组</strong>之类的<strong>非基本类型值</strong>作为v-for的key。<br>接受的值为：number | string | boolean (2.4.2 新增) | symbol (2.5.12 新增)<br>重复的 key 会造成渲染错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常我们在用v-for指令渲染列表时，如果没有定义 &lt;strong&gt;v-bind:key&lt;/strong&gt;，那么会得到错误提示，&lt;br&gt;可能你会不以为然地加上就万事大吉了&lt;br&gt;但，在某些情况下还是要小心为妙&lt;/p&gt;
&lt;p&gt;先来看一下vue官方文档&lt;/p&gt;
&lt;blockqu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2021/01/05/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2021/01/05/跨域/</id>
    <published>2021-01-05T06:03:25.000Z</published>
    <updated>2021-01-06T02:15:25.318Z</updated>
    
    <content type="html"><![CDATA[<p><strong>跨域</strong>是浏览器基于<strong>同源策略</strong>的一种安全手段</p><blockquote><p><strong>同源策略</strong>   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是一种约定，是浏览器最核心也最基本的安全功能</span><br><span class="line">用于隔离潜在恶意文件的安全机制，通常不允许不同源之间的读操作</span><br></pre></td></tr></table></figure><blockquote><p><strong>同源( Sameoriginpolicy )</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">协议相同 protocol</span><br><span class="line">主机相同 host</span><br><span class="line">端口相同 port</span><br></pre></td></tr></table></figure><table><thead><tr><th>url-1</th><th>url-2</th><th style="text-align:center">允许通信</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>http:<a href="http://www.example.com/a.js" target="_blank" rel="noopener">www.example.com/a.js</a></td><td>http:<a href="http://www.example.com/lab/b.js" target="_blank" rel="noopener">www.example.com/lab/b.js</a></td><td style="text-align:center">✅</td><td style="text-align:center">同一域名，不同文件路径</td></tr><tr><td>http:<a href="http://www.example.com:8080/a.js" target="_blank" rel="noopener">www.example.com:8080/a.js</a></td><td>http:<a href="http://www.example.com/c.js" target="_blank" rel="noopener">www.example.com/c.js</a></td><td style="text-align:center">❎</td><td style="text-align:center">同一域名，端口不同</td></tr><tr><td><a href="http://www.example.com/a.js" target="_blank" rel="noopener">http://www.example.com/a.js</a></td><td><a href="https://www.example.com/c.js" target="_blank" rel="noopener">https://www.example.com/c.js</a></td><td style="text-align:center">❎</td><td style="text-align:center">同一域名，协议不同</td></tr><tr><td><a href="http://www.example.com/a.js" target="_blank" rel="noopener">http://www.example.com/a.js</a></td><td><a href="https://192.169.2xx.2x/b.js" target="_blank" rel="noopener">https://192.169.2xx.2x/b.js</a></td><td style="text-align:center">❎</td><td style="text-align:center">域名和域名对应相同的ip</td></tr><tr><td><a href="http://www.example.com/a.js" target="_blank" rel="noopener">http://www.example.com/a.js</a></td><td><a href="http://www.demo.com/c.js" target="_blank" rel="noopener">http://www.demo.com/c.js</a></td><td style="text-align:center">❎</td><td style="text-align:center">主域不同</td></tr><tr><td><a href="http://www.example.com/a.js" target="_blank" rel="noopener">http://www.example.com/a.js</a></td><td><a href="http://x.example.com/c.js" target="_blank" rel="noopener">http://x.example.com/c.js</a></td><td style="text-align:center">❎</td><td style="text-align:center">子域不同</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.xxx.com 中 www是顶级域名，xxx.com是二级域名（主域名）</span><br><span class="line">aaa.xxx.com 中 aaa则是分域名（子域）</span><br></pre></td></tr></table></figure><blockquote><p>注意-跨域是浏览器出于安全性做的限制<br><strong>也就是说，非同源的请求就会产生跨域</strong></p></blockquote><blockquote><p><strong>解决方法</strong></p><ul><li>JSONP</li><li>document.domain + iframe</li><li>window.name + iframe</li><li>location.hash + iframe</li><li>postMessage</li><li>CORS</li><li>Nginx代理</li><li>nodejs中间件代理</li><li>webSocket协议</li></ul></blockquote><blockquote><p><strong>JSONP</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  只支持GET请求 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, callback, success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.url = url;</span><br><span class="line">    script.async = <span class="literal">true</span>;</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        success &amp;&amp; success(data);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在vue项目中，一般关注 CORS / proxy<br><strong>CORS</strong>, 跨域资源共享（Cross-origin Resource Sharing）, 是一个系统</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由一系列传输的HTTP头组成</span><br><span class="line">=&gt;(HTTP HEADERS)</span><br><span class="line"></span><br><span class="line">！服务端需打开这个限制 ！</span><br><span class="line">Access-Control-Allow-Origin: * | &lt;origin&gt; 指定一个可访问资源的URI</span><br></pre></td></tr></table></figure><p>如果服务端未使用*, 而是指定了一个域，那么为了向客户端表明服务器的返回会根据Origin请求头而有不同, 即对不同源返回不同的内容<br>必须在<strong>Vary</strong>响应头中包含Origin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &lt;origin&gt;</span><br><span class="line">Vary: Origin</span><br></pre></td></tr></table></figure></p><blockquote><p>Simple requests（简单请求）</p></blockquote><p>使用方法： GET / HEAD / POST<br>Content-type值的限制</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><blockquote><p>Preflighted requests（预检请求）</p></blockquote><p>基于<strong>OPTIONS</strong>方法进行过滤，发起一个预检请求到服务器，以获知是否允许该实际请求<br>作用：避免跨域请求对服务器的用户数据产生未预期的影响</p><p>OPTIONS请求通过<strong>Access-Control-Request-Method</strong>告知实际请求使用的方法<br>服务端返回响应<strong>Access-Control-Allow-Methods</strong>表示允许客户端使用的方法发起请求</p><blockquote><p><strong>网络代理</strong><br>运行一个通过这个服务与另一个网络终端进行非直接的连接</p></blockquote><ol><li><p>如果是通过vue-cli搭建工具，可通过<strong>webpack</strong>起一个本地服务器作为请求代理对象<br>但上线时web应用和接口服务器不在一起，还是会跨域</p></li><li><p>服务器实现代理请求转发，以<strong>express</strong>框架为例</p></li><li>通过配置<strong>nginx</strong>实现代理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;是浏览器基于&lt;strong&gt;同源策略&lt;/strong&gt;的一种安全手段&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;同源策略&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ts</title>
    <link href="http://yoursite.com/2020/11/19/ts/"/>
    <id>http://yoursite.com/2020/11/19/ts/</id>
    <published>2020-11-19T08:01:01.000Z</published>
    <updated>2020-11-19T08:01:01.257Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ts-基础类型</title>
    <link href="http://yoursite.com/2020/11/16/ts-md/"/>
    <id>http://yoursite.com/2020/11/16/ts-md/</id>
    <published>2020-11-16T02:36:12.000Z</published>
    <updated>2020-11-16T06:40:40.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>常见类型</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let a:number = 1</span><br><span class="line">let hex:number = 0x14</span><br><span class="line">let b:string = &apos;b&apos;</span><br><span class="line">let c:boolean = false</span><br><span class="line">let d:number[] = [1,2,3]</span><br><span class="line">let e:Array&lt;String&gt; = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;]</span><br></pre></td></tr></table></figure><blockquote><p><strong>元祖类型 Tuple</strong> </p></blockquote><p>表示一个已知元素数量和类型数组，各元素类型不必相同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x:[number, string]   </span><br><span class="line">x = [2, &apos;a&apos;] ✅</span><br><span class="line">x = [&apos;a&apos;, 3] ❎</span><br></pre></td></tr></table></figure></p><p>当访问越界元素时，会使用联合类型替代<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[3] = &apos;b&apos;      // ✅ string可赋值给string | number</span><br><span class="line">x[5].toString() // ✅ string | number 都有toString()</span><br><span class="line">x[6] = true     // ❎ 类型不符合</span><br></pre></td></tr></table></figure></p><p>❌ ts 3.1版本之后，访问越界元素会报错</p><blockquote><p><strong>枚举类型</strong></p></blockquote><p>默认情况下，<strong>元素值从0开始，也可手动赋值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">    Red = 1,</span><br><span class="line">    Green,</span><br><span class="line">    Blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提供便利：由枚举值得到属性名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let c: Color = Color.Green</span><br><span class="line">let colorName:string = Color[2]</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>any类型</strong> 任意类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let notSure:any = 4</span><br><span class="line">notSure = `maybe a string instead`</span><br></pre></td></tr></table></figure><p>对现有代码进行改写时，any类型十分有用，允许你在编译时可选择地包含或移除类型检查。<br>并且当只知道一部分数据的类型时，any 类型也是有用的</p><blockquote><p><strong>void</strong> 无任何类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function xxx():void &#123;</span><br><span class="line">    // 无返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 void  变量无意义，只能赋给  null | undefined </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let unusable:void = null // 无意义</span><br><span class="line">let unusable:void = undefined // 无意义</span><br></pre></td></tr></table></figure><blockquote><p><strong>null &amp; undefined</strong>  任意类型</p></blockquote><p>默认情况下 null 和 undefined 是所有类型的<strong>子类型</strong><br><strong>子类型可以赋值给父类型</strong>，像下面这个例子，null和undefined赋值给number类型的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let u:undefined = undefined</span><br><span class="line">let n:null = undefined</span><br><span class="line"></span><br><span class="line">let num:number =3</span><br><span class="line">num = null</span><br></pre></td></tr></table></figure><p>常规编译不出错<br>严格编译 <strong>tsc xxx.ts –strictNullChecks</strong> 将会检查null，从而规避一些问题</p><blockquote><p><strong>联合类型</strong>  任意类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let num:number | null = 2</span><br></pre></td></tr></table></figure><blockquote><p><strong>never</strong> 那些永不存在的值的类型</p></blockquote><p>是<strong>任意类型的子类型</strong>，可以赋值给任何类型<br><strong>别的类型都不是never的子类型，不可赋值给never</strong><br>常用于<strong>抛出一些异常</strong>或<strong>没有返回值的函数表达式</strong>或<strong>箭头函数表达式的返回值类型</strong></p><p>返回never的函数必须存在无法达到的终点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function error(message:string):never &#123;</span><br><span class="line">    throw new Error(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fail () &#123;</span><br><span class="line">    return error(&apos;sth. failed&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function infiniteLoop():never &#123;</span><br><span class="line">    while(true) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>object 非原始类型，除number/string/boolean/numm/symbol/undefined之外的类型</strong></p></blockquote><p>类似object.create() API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare function create(o:object|null):void</span><br><span class="line">create(&#123;prop: 0&#125;) </span><br><span class="line">create(null)</span><br><span class="line">create(42)          ❎</span><br><span class="line">create(false)       ❎</span><br><span class="line">create(undefined)   ❎</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>类型断言</strong></p></blockquote><p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。<br>通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。<br>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。<br>它没有运行时的影响，只是在编译阶段起作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let someValue:any = &apos;this is a string&apos;</span><br><span class="line">someValue.length // // 此时找不到.length</span><br><span class="line"></span><br><span class="line">let strLength:number=(&lt;string&gt;someValue).length</span><br><span class="line">let strLength:number=(someValue as string).length</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见类型&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack探路</title>
    <link href="http://yoursite.com/2018/01/12/webpack%E6%8E%A2%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/01/12/webpack探路/</id>
    <published>2018-01-12T05:54:08.000Z</published>
    <updated>2018-01-12T06:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>###webpack初步理解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-eg</span><br><span class="line"><span class="built_in">cd</span> webpack-eg</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></p><p>###提交二</p><p>#关键词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server 代理</span><br><span class="line">source-map</span><br><span class="line">部署上线 webpack-prod.config.js</span><br><span class="line">分离app.js 和 第三方库</span><br><span class="line">vendor: [] / filename: &apos;[name].js&apos;</span><br><span class="line">uglifyJs CommonsChunkPlugin</span><br><span class="line">babel-loader</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>###提交三</p><p>#关键词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">生成多页面</span><br><span class="line">多入口</span><br><span class="line">templatesindex.html / mobile.html</span><br><span class="line">生成hash名称的script 来防止缓存</span><br><span class="line">output filename: [name].[hash].js</span><br></pre></td></tr></table></figure></p><p>###提交四</p><p>#关键词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start命令指定 webpack.dev.js</span><br><span class="line">区分生产环境和开发环境 </span><br><span class="line">保留通用配置 webpack.common.js</span><br><span class="line">webpack-merge</span><br></pre></td></tr></table></figure></p><p>具体代码移步–<a href="https://github.com/karencxx/webpack-demo.git" target="_blank" rel="noopener">https://github.com/karencxx/webpack-demo.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###webpack初步理解&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在note上添加上vue-router</title>
    <link href="http://yoursite.com/2017/12/13/vue-router/"/>
    <id>http://yoursite.com/2017/12/13/vue-router/</id>
    <published>2017-12-13T07:18:24.000Z</published>
    <updated>2017-12-14T03:26:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>把note项目改造了一下，采用路由的方式<br>单页面应用</p><h3 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在src下新建文件夹router</span><br><span class="line"></span><br><span class="line">在main.js中</span><br><span class="line">import router from <span class="string">'./router'</span></span><br><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(router)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="之前的写法"><a href="#之前的写法" class="headerlink" title="之前的写法"></a>之前的写法</h3><pre><code>import router from &apos;./router&apos;import Vue from &apos;vue&apos;Vue.use(router)new Vue({    store, //vuex    el: &apos;#app&apos;,    router,    template: &apos;&lt;App/&gt;&apos;,    components: { App } //import App from &apos;./App&apos;})</code></pre><h3 id="现在的写法"><a href="#现在的写法" class="headerlink" title="现在的写法"></a>现在的写法</h3><pre><code>new Vue({    store, //vuex    el: &apos;#app&apos;,    router,    ...App})</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.vue</span><br><span class="line"></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="路由文件-router-index-js"><a href="#路由文件-router-index-js" class="headerlink" title="路由文件 router/index.js"></a>路由文件 router/index.js</h3><pre><code>import Router from &apos;vue-router&apos;import Index from &apos;@/views/Index&apos;Vue.use(Router)export default new Router({    routes: [    {        path: &apos;/index&apos;,        name: &apos;index&apos;,        component: Index    },{    }]})</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置完router后，发现url为 http://localhost:8080/<span class="comment">#/</span></span><br><span class="line">在此就要了解一下 vue-router 是默认<span class="built_in">hash</span>模式的，</span><br><span class="line">也就是说当url改变时，页面不会重新加载，相当于锚点跳转</span><br><span class="line">如果不想要这种<span class="built_in">hash</span>模式，可以采用history.pushState API完成跳转</span><br></pre></td></tr></table></figure><h3 id="vue2-0-路由选择-Modes"><a href="#vue2-0-路由选择-Modes" class="headerlink" title="vue2.0 路由选择 Modes"></a>vue2.0 路由选择 Modes</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">new Router(&#123;</span><br><span class="line"><span class="built_in">history</span>: <span class="literal">true</span>,</span><br><span class="line">routes:[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h3 id="但需要注意的是，这种情况需要后端的支持，比如locahost-8080-login-id这种就会找不到"><a href="#但需要注意的是，这种情况需要后端的支持，比如locahost-8080-login-id这种就会找不到" class="headerlink" title="但需要注意的是，这种情况需要后端的支持，比如locahost:8080/login/:id这种就会找不到"></a>但需要注意的是，这种情况需要后端的支持，比如locahost:8080/login/:id这种就会找不到</h3><pre><code>暂时处理方法可以是 定义一个routes * 当所有找不到的path时 都指向404.vue</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把note项目改造了一下，采用路由的方式&lt;br&gt;单页面应用&lt;/p&gt;
&lt;h3 id=&quot;记录一下&quot;&gt;&lt;a href=&quot;#记录一下&quot; class=&quot;headerlink&quot; title=&quot;记录一下&quot;&gt;&lt;/a&gt;记录一下&lt;/h3&gt;&lt;figure class=&quot;highlight bas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>运用vuex构建note</title>
    <link href="http://yoursite.com/2017/11/28/vuex/"/>
    <id>http://yoursite.com/2017/11/28/vuex/</id>
    <published>2017-11-28T10:12:34.000Z</published>
    <updated>2017-12-13T07:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>vuex探究</p><p>最近研究了下vue+vuex,正好看到了国外的一篇文章(如何构建一个笔记的单页应用),就着练手了下,也从中发现了一些问题并解决了。<br>–国外文章地址：<a href="https://coligo.io/learn-vuex-by-building-notes-app/" target="_blank" rel="noopener">https://coligo.io/learn-vuex-by-building-notes-app/</a><br>在此记录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">具体安装操作什么的就不一一详细说明了。</span><br></pre></td></tr></table></figure><h3 id="那篇文章的vue版本应该是1-0，而本地项目安装的版本为2-0，所以练习的过程中碰到了一些问题。"><a href="#那篇文章的vue版本应该是1-0，而本地项目安装的版本为2-0，所以练习的过程中碰到了一些问题。" class="headerlink" title="那篇文章的vue版本应该是1.0，而本地项目安装的版本为2.0，所以练习的过程中碰到了一些问题。"></a>那篇文章的vue版本应该是1.0，而本地项目安装的版本为2.0，所以练习的过程中碰到了一些问题。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.0使用了mapActions,mapGetters</span><br><span class="line">dispatch =&gt; commit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; addNote, deleteNote, toggleFavorite &#125; from <span class="string">'../vuex/actions'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  vuex: &#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">      activeNote: state =&gt; state.activeNote</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      addNote,</span><br><span class="line">      deleteNote,</span><br><span class="line">      toggleFavorite</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapActions, mapGetters &#125; from <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">...mapActions([<span class="string">'editNote'</span>, <span class="string">'editContent'</span>])</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">...mapGetters([<span class="string">'activeNoteText'</span>, <span class="string">'activeNoteContent'</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>actions.js的引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import * as actions from <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123; actions&#125;)</span><br><span class="line"></span><br><span class="line">就不需要</span><br><span class="line">import &#123; addNote, deleteNote, toggleFavorite &#125; from <span class="string">'../vuex/actions'</span></span><br><span class="line"></span><br><span class="line">在main.js注入store</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">还有个数据绑定的小问题</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> @input=<span class="string">"editNote"</span> v-model=<span class="string">"activeNoteText"</span>&gt;</span><br><span class="line">这时候会报一个错：Computed property <span class="string">"activeNoteText"</span> was assigned to but it has no setter.</span><br></pre></td></tr></table></figure><p>stackoverflow上有段解释 (<a href="https://stackoverflow.com/questions/46106037/vuex-computed-property-name-was-assigned-to-but-it-has-no-setter" target="_blank" rel="noopener">https://stackoverflow.com/questions/46106037/vuex-computed-property-name-was-assigned-to-but-it-has-no-setter</a>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you<span class="string">'re going to v-model a computed, it needs a setter. Whatever you want it to do with the updated value (probably write it to the $store, considering that'</span>s what your getter pulls it from) you <span class="keyword">do</span> <span class="keyword">in</span> the setter.</span><br><span class="line"></span><br><span class="line">If writing it back to the store happens via form submission, you don<span class="string">'t want to v-model, you just want to set :value.</span></span><br></pre></td></tr></table></figure></p><p>具体代码在 <a href="https://github.com/karencxx/vue.git" target="_blank" rel="noopener">https://github.com/karencxx/vue.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vuex探究&lt;/p&gt;
&lt;p&gt;最近研究了下vue+vuex,正好看到了国外的一篇文章(如何构建一个笔记的单页应用),就着练手了下,也从中发现了一些问题并解决了。&lt;br&gt;–国外文章地址：&lt;a href=&quot;https://coligo.io/learn-vuex-by-build
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue项目构建</title>
    <link href="http://yoursite.com/2017/11/27/vue%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/11/27/vue项目构建/</id>
    <published>2017-11-27T06:15:37.000Z</published>
    <updated>2017-12-21T09:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>###记录一下</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前提: node和npm环境</span><br></pre></td></tr></table></figure><p>安装vue-cli脚手架<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init webpack [project name]</span><br><span class="line">初始化项目，整个项目是基于webpack，项目信息具体步骤如下图</span><br></pre></td></tr></table></figure></p><p><img src="/img/vue-init.png" alt="vue init project"></p><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack [project name]</span><br></pre></td></tr></table></figure></p><p>安装项目依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入项目所在文件夹，执行npm install</span><br></pre></td></tr></table></figure></p><p>运行项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev 热部署项目</span><br><span class="line"></span><br><span class="line">其中的“run”对应的是package.json文件中，scripts字段中的dev，也就是 node build/dev-server.js命令的一个快捷方式。</span><br></pre></td></tr></table></figure></p><p>项目文件结构<br><img src="/img/vue-structure.png" alt="vue project structure"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###记录一下&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1123-2</title>
    <link href="http://yoursite.com/2017/11/23/1123-2/"/>
    <id>http://yoursite.com/2017/11/23/1123-2/</id>
    <published>2017-11-23T03:21:38.000Z</published>
    <updated>2017-11-23T07:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Express 路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路由,Routing是由一个URI和一个特定的HTTP方法组成的，涉及到应用如何相应客户端对某个网站节点的访问。</span><br></pre></td></tr></table></figure><p>结构组成:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER)</span><br><span class="line">app是一个express实例；METHOD是某个HTTP请求方式中的一个；PATH是服务器端的路径;HANDLER是当路由匹配到时需要执行的函数</span><br></pre></td></tr></table></figure></p><p>Express 托管静态文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过内置的express.static可以方便地托管静态文件，例如图片，css，JavaScript文件等</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将静态资源文件所在的目录座位参数传递给express.static中间件就可以提供静态资源文件的访问了。</span><br><span class="line">例如：在public目录放置了静态资源，设置app.use(express.static(<span class="string">'public'</span>))，就可以通过localhost:3000/images/xxx.png访问了</span><br><span class="line"></span><br><span class="line">还可以指定一个挂载前缀，app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>)),访问路径为localhost:3000/static/images/xxx.png</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 文件路径是相对路径，即存放静态文件的目录名不会出现在url中</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在express中404并不是一个error,因此错误处理器中间件捕获不到404，需要单独拎出来处理</span><br><span class="line">(404相对来说只是功能未完全实现)</span><br><span class="line">app.use(<span class="keyword">function</span>(req, res, next)&#123;</span><br><span class="line">res.status(404).send(<span class="string">'404 not find'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置错误处理器,多一个err参数</span><br><span class="line">app.use(<span class="keyword">function</span>(err, req, res, next)&#123;</span><br><span class="line">res.status(500).send(<span class="string">'error'</span>+ err.stack)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符串模式的路由路径</span><br><span class="line">?、+、*、()是正则表达式的子集</span><br><span class="line"></span><br><span class="line">/ab?<span class="built_in">cd</span> -- 匹配abcd、acd</span><br><span class="line">/ab+<span class="built_in">cd</span> -- 匹配abcd、abbcd、abbbcd等</span><br><span class="line">/ab*<span class="built_in">cd</span> -- 匹配abcd、abxcd、abjfkjfcd等</span><br><span class="line">/ab(<span class="built_in">cd</span>)?e -- 匹配abe、abcde</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.route() 创建路由路径的链式路由句柄。</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/test'</span>)</span><br><span class="line">.get(<span class="keyword">function</span>(req, res)&#123;</span><br><span class="line">res.send(<span class="string">'test a'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="keyword">function</span>(req, res)&#123;</span><br><span class="line">res.send(<span class="string">'test b'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可用express.Router类创建模块化、可挂载的路由句柄。</span><br></pre></td></tr></table></figure><p>参考<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.expressjs.com.cn/starter/installing.html</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Express 路由&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1123</title>
    <link href="http://yoursite.com/2017/11/23/1123/"/>
    <id>http://yoursite.com/2017/11/23/1123/</id>
    <published>2017-11-23T02:57:57.000Z</published>
    <updated>2017-11-23T03:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Express安装记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前提 -- node环境</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp -- 创建工作目录</span><br><span class="line">cd myapp -- 进入</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -- 初始化package.json，依次enter键就好了，但注意entry point所指向的文件(在此命名为app.js)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save --安装express</span><br><span class="line">npm install express -- 临时安装</span><br></pre></td></tr></table></figure><p>入门第一步 – hello world<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd myapp -- 进入myapp目录，创建app.js</span><br></pre></td></tr></table></figure></p><p>输入代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var app = express()</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">res.send(&apos;Hello World&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var server = app.listen(3000, function()&#123;</span><br><span class="line">var host = server.address().address</span><br><span class="line">var host = server.address().port</span><br><span class="line">console.log(&apos;Example app listening at http://%s:%s&apos;, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 代码解释: 启动一个服务并监听从3000端口进入的所有连接服务。他将对所有(/)URL或路由返回&apos;Hello World&apos;的字符串</span><br><span class="line">对其他路径返回404</span><br></pre></td></tr></table></figure><p>启动应用</p><pre><code class="base">node app.js</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Express安装记录&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1121</title>
    <link href="http://yoursite.com/2017/11/21/1121/"/>
    <id>http://yoursite.com/2017/11/21/1121/</id>
    <published>2017-11-21T09:26:02.000Z</published>
    <updated>2017-11-21T09:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">得过且过</span><br><span class="line">感觉有点漫无目的</span><br><span class="line">给自己定的小目标也没有落实</span><br><span class="line">毫无头绪，不知道从何开头</span><br><span class="line">胡思乱想 乱七八糟的</span><br><span class="line">看来得好好规划了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>create a plugin</title>
    <link href="http://yoursite.com/2017/11/17/create-a-plugin/"/>
    <id>http://yoursite.com/2017/11/17/create-a-plugin/</id>
    <published>2017-11-17T06:39:10.000Z</published>
    <updated>2017-11-17T08:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/AntBody/138zf8kk/embedded/js,html,css,result/dark" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe scrolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/AntBody/138zf8kk/embedded/js,html,css,result/dark&quot; frameborder=&quot;0&quot; allo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1116</title>
    <link href="http://yoursite.com/2017/11/16/1116/"/>
    <id>http://yoursite.com/2017/11/16/1116/</id>
    <published>2017-11-16T03:13:03.000Z</published>
    <updated>2017-11-22T03:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>了解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dubbo 分布式服务框架 远程服务调用</span><br><span class="line">Zookeeper 选举机制 paxos算法</span><br></pre></td></tr></table></figure></p><p>最近小目标<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.JS、ES6、css3</span><br><span class="line">2.插件编写</span><br><span class="line">3.css sprite雪碧图</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/p
      
    
    </summary>
    
    
  </entry>
  
</feed>
